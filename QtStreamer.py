# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PyStreamer.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from tkinter import BooleanVar, IntVar, StringVar
from tkinter.constants import COMMAND
from PyQt5 import QtCore, QtGui, QtWidgets
import os, sys
import pafy #pip install pafy
from bs4 import BeautifulSoup
import re, requests, subprocess, urllib.parse, urllib.request
import vlc #pip install python-vlc
import time

class vlPlayer():
##list of all commands from the terminal for vlc: https://wiki.videolan.org/VLC_command-line_help/
##Also handy for explaining what the above one doesn't: https://www.olivieraubert.net/vlc/python-ctypes/doc/
    def __init__(self):
        # Thread.__init__(self)
        #This makes the audio actually bareable
        self.options = [
            "--aout=waveout",
            "--equalizer-preset=flat",
            "--speex-resampler-quality=10",
            "--src-converter-type=0",
        ]
        self.from_playlist = False
        self.vlc_instance=vlc.Instance(self.options)
        self.player = self.vlc_instance.media_player_new()
        #These also make the audio bareable
        self.eq = vlc.AudioEqualizer()
        self.eq.set_preamp(6)
        self.player.set_equalizer(self.eq)
        self.volume = int(100)


    def play(self, url):
        self.from_playlist-False
        self.player.stop()
        # self.player = self.vlc_instance.media_player_new()
        self.media = self.vlc_instance.media_new(url)
        self.media.get_mrl()
        self.player.set_media(self.media)
        self.player.set_equalizer(self.eq)
        self.player.play()
        self.setVol(self.volume)
    
    def playlist(self, urls):
        self.player=self.vlc_instance.media_player_new()
        playing = set([1,2,3,4])
        for i in urls:
            self.player.set_mrl(i)
            self.player.play()
            play = True
            while play == True:
                time.sleep(1)
                play_state = self.player.get_state()
                if play_state in playing:
                    continue
                else:
                    play=False
        
        # self.from_playlist=True
        # self.player.stop()
        # self.player = self.vlc_instance.media_list_player_new()
        # self.media_list = self.vlc_instance.media_list_new()
        # self.pl_inst = self.player.get_media_player()
        # # self.pl_inst = self.vlc_instance.media_player_new()
        # self.pl_inst.set_equalizer(self.eq)
        # for item in urls:
        #     self.media = self.vlc_instance.media_new(item[1])
        #     self.media.get_mrl()
        #     self.media_list.add_media(self.media)
        # self.player.set_media_list(self.media_list)
        # self.player.set_media_player(self.pl_inst)
        # # self.player.set_equalizer(self.eq)
        # self.player.play()
        # self.setVol(self.volume)

        #  self.media = self.vlc_instance.media_list_new(urls)
        # self.media.get_mrl()
        # self.player=vlc.Instance(self.options).media_list_player_new()
        # self.player.set_media_list(self.media)
        # self.player.set_equalizer(self.eq)
        # self.player.play()
        # self.setVol(self.volume)

    def pause(self):
        self.player.pause()

    def stop(self):
        self.player.stop()

    def getCurrTime(self):
        return self.player.get_time() / 1000

    def getLength(self):
        return self.player.get_length() / 1000

    def getFormattedTime(self):
        if (self.getCurrTime() == -.001):
            return "00:00:00"
        return time.strftime('%H:%M:%S', time.gmtime(self.getCurrTime()))

    def getFormattedLength(self):
        if (self.getLength() == -.001):
            return "00:00:00"
        return time.strftime('%H:%M:%S', time.gmtime(self.getLength()))
    
    def setPos(self, time_var):
        self.player.set_time(time_var*1000)
    
    def setVol(self, volume):
        self.volume = volume
        self.player.audio_set_volume(int(volume))
    
    def get_state(self):
        return self.player.get_state()
    
    def get_is_playing(self):
        return self.player.is_playing()
    
    def get_is_finished(self):
        return self.getCurrTime() == self.getLength()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(740, 420)
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        MainWindow.setAutoFillBackground(False)
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.enterSong_lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.enterSong_lineEdit.setGeometry(QtCore.QRect(93, 20, 491, 20))
        self.enterSong_lineEdit.setObjectName("enterSong_lineEdit")
        
        self.enterSongPrompt_label = QtWidgets.QLabel(self.centralwidget)
        self.enterSongPrompt_label.setGeometry(QtCore.QRect(20, 20, 65, 16))
        self.enterSongPrompt_label.setObjectName("enterSongPrompt_label")
        
        self.queue_listWidget = QtWidgets.QListWidget(self.centralwidget)
        self.queue_listWidget.setGeometry(QtCore.QRect(10, 150, 111, 161))
        self.queue_listWidget.setObjectName("queue_listWidget")
        
        self.music_horizontalSlider = QtWidgets.QSlider(self.centralwidget)
        self.music_horizontalSlider.setGeometry(QtCore.QRect(200, 280, 401, 22))
        self.music_horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.music_horizontalSlider.setObjectName("music_horizontalSlider")
        self.music_horizontalSlider.valueChanged.connect(self.c_t)
        # self.music_horizontalSlider.sliderMoved().connect(lambda: change_time)
        # QtCore.QTimer.singleShot(0, lambda: change_time)
        
        self.queue_label = QtWidgets.QLabel(self.centralwidget)
        self.queue_label.setGeometry(QtCore.QRect(10, 120, 111, 20))
        self.queue_label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.queue_label.setAlignment(QtCore.Qt.AlignCenter)
        self.queue_label.setObjectName("queue_label")
        
        self.volume_verticalSlider = QtWidgets.QSlider(self.centralwidget)
        self.volume_verticalSlider.setGeometry(QtCore.QRect(700, 160, 22, 141))
        self.volume_verticalSlider.setMaximum(125)
        self.volume_verticalSlider.setMinimum(0)
        self.volume_verticalSlider.setValue(100)
        self.volume_verticalSlider.setOrientation(QtCore.Qt.Vertical)
        self.volume_verticalSlider.setObjectName("volume_verticalSlider")
        self.volume_verticalSlider.valueChanged.connect(self.c_v)
        
        self.entry_frame = QtWidgets.QFrame(self.centralwidget)
        self.entry_frame.setGeometry(QtCore.QRect(10, 10, 711, 101))
        self.entry_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.entry_frame.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.entry_frame.setLineWidth(1)
        self.entry_frame.setObjectName("entry_frame")
        
        self.searchYT_pushButton = QtWidgets.QPushButton(self.entry_frame, clicked=lambda: search(self.enterSong_lineEdit.text()))
        self.searchYT_pushButton.setGeometry(QtCore.QRect(580, 10, 121, 23))
        self.searchYT_pushButton.setObjectName("searchYT_pushButton")
        
        self.resultPrompt_label = QtWidgets.QLabel(self.entry_frame)
        self.resultPrompt_label.setGeometry(QtCore.QRect(10, 30, 41, 21))
        self.resultPrompt_label.setObjectName("resultPrompt_label")
        
        self.playEntry_pushButton = QtWidgets.QPushButton(self.entry_frame, clicked=lambda: play_btn())
        self.playEntry_pushButton.setGeometry(QtCore.QRect(240, 75, 111, 23))
        self.playEntry_pushButton.setObjectName("playEntry_pushButton")
        
        self.addToQueue_pushButton = QtWidgets.QPushButton(self.entry_frame, clicked=lambda: add_song())
        self.addToQueue_pushButton.setGeometry(QtCore.QRect(380, 75, 111, 23))
        self.addToQueue_pushButton.setObjectName("addToQueue_pushButton")
        
        self.result_label = QtWidgets.QLabel(self.entry_frame)
        self.result_label.setGeometry(QtCore.QRect(10, 50, 691, 20))
        self.result_label.setObjectName("result_label")
        
        self.volumeIdentifier_label = QtWidgets.QLabel(self.centralwidget)
        self.volumeIdentifier_label.setGeometry(QtCore.QRect(690, 130, 41, 16))
        self.volumeIdentifier_label.setAlignment(QtCore.Qt.AlignCenter)
        self.volumeIdentifier_label.setObjectName("volumeIdentifier_label")
        
        self.currentTime_lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.currentTime_lineEdit.setGeometry(QtCore.QRect(130, 280, 61, 20))
        self.currentTime_lineEdit.setObjectName("currentTime_lineEdit")
        self.currentTime_lineEdit.setText("00:00:00")
        
        self.length_label = QtWidgets.QLabel(self.centralwidget)
        self.length_label.setGeometry(QtCore.QRect(610, 280, 71, 21))
        self.length_label.setAlignment(QtCore.Qt.AlignCenter)
        self.length_label.setObjectName("length_label")
        
        self.status_frame = QtWidgets.QFrame(self.centralwidget)
        self.status_frame.setGeometry(QtCore.QRect(0, 369, 741, 71))
        self.status_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.status_frame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.status_frame.setObjectName("status_frame")
        
        self.statusSong_label = QtWidgets.QLabel(self.status_frame)
        self.statusSong_label.setGeometry(QtCore.QRect(6, 3, 421, 31))
        self.statusSong_label.setObjectName("statusSong_label")
        
        self.statusTime_label = QtWidgets.QLabel(self.status_frame)
        self.statusTime_label.setGeometry(QtCore.QRect(460, 2, 281, 31))
        self.statusTime_label.setObjectName("statusTime_label")
        
        self.playQueue_pushButton = QtWidgets.QPushButton(self.centralwidget, clicked=lambda: play_queue_btn())
        self.playQueue_pushButton.setGeometry(QtCore.QRect(10, 310, 111, 23))
        self.playQueue_pushButton.setObjectName("playQueue_pushButton")
        
        self.volume_lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.volume_lineEdit.setGeometry(QtCore.QRect(690, 310, 41, 20))
        self.volume_lineEdit.setObjectName("volume_lineEdit")
        self.volume_lineEdit.setText(str(100))
        
        self.controls_frame = QtWidgets.QFrame(self.centralwidget)
        self.controls_frame.setGeometry(QtCore.QRect(130, 310, 541, 41))
        self.controls_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.controls_frame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.controls_frame.setObjectName("controls_frame")
        
        self.play_pushButton = QtWidgets.QPushButton(self.controls_frame, clicked=lambda: play_btn())
        self.play_pushButton.setGeometry(QtCore.QRect(10, 10, 131, 23))
        self.play_pushButton.setObjectName("play_pushButton")
        
        self.pause_res_pushButton = QtWidgets.QPushButton(self.controls_frame, clicked=lambda: resume_pause())
        self.pause_res_pushButton.setGeometry(QtCore.QRect(200, 10, 141, 23))
        self.pause_res_pushButton.setObjectName("pause_res_pushButton")
        
        self.stop_pushButton = QtWidgets.QPushButton(self.controls_frame, clicked=lambda: stop())
        self.stop_pushButton.setGeometry(QtCore.QRect(400, 10, 131, 23))
        self.stop_pushButton.setObjectName("stop_pushButton")
        
        self.status_frame.raise_()
        
        self.entry_frame.raise_()
        
        self.enterSong_lineEdit.raise_()
        
        self.enterSongPrompt_label.raise_()
        
        self.queue_listWidget.raise_()
        
        self.music_horizontalSlider.raise_()
        
        self.queue_label.raise_()
        
        self.volume_verticalSlider.raise_()
        
        self.volumeIdentifier_label.raise_()
        
        self.currentTime_lineEdit.raise_()
        
        self.length_label.raise_()
        
        self.playQueue_pushButton.raise_()
        
        self.volume_lineEdit.raise_()
        
        self.controls_frame.raise_()
        
        MainWindow.setCentralWidget(self.centralwidget)
        
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "PyStreamer"))
        self.enterSongPrompt_label.setText(_translate("MainWindow", "Enter a song:"))
        self.queue_label.setText(_translate("MainWindow", "Queue"))
        self.searchYT_pushButton.setText(_translate("MainWindow", "Search YT"))
        self.resultPrompt_label.setText(_translate("MainWindow", "Result:"))
        self.playEntry_pushButton.setText(_translate("MainWindow", "Play"))
        self.addToQueue_pushButton.setText(_translate("MainWindow", "Add to queue"))
        self.result_label.setText(_translate("MainWindow", "Placeholder"))
        self.volumeIdentifier_label.setText(_translate("MainWindow", "Volume"))
        self.length_label.setText(_translate("MainWindow", "00:00:00"))
        self.statusSong_label.setText(_translate("MainWindow", "No Song Playing"))
        self.statusTime_label.setText(_translate("MainWindow", "Time Elapse: 00:00:00     Song Length: 00:00:00"))
        self.playQueue_pushButton.setText(_translate("MainWindow", "Play Queue"))
        self.play_pushButton.setText(_translate("MainWindow", "Play"))
        self.pause_res_pushButton.setText(_translate("MainWindow", "Pause"))
        self.stop_pushButton.setText(_translate("MainWindow", "Stop"))

    def c_t(self,event):
        if self.music_horizontalSlider.isSliderDown() == True:
            change_time(event)
    
    def c_v(self, event):
        print(event)
        change_vol(event)


app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(MainWindow)
MainWindow.show()

# ui.volume_lineEdit.setText(ui.volume_verticalSlider.value)

playing = False
res_pause = "__"

query_url = ""
query_title = ""
found_title = ""
query_thumbnail = ""
display_var = "Enter a song name"
queue = []
q_url = []
q_btn_state = False
queue_selected=False
th_timer = ""
in_queue=False
pl_indiv=False
pl_queue=False
play_next=False
end_of_queue=True
is_fin=False
curr_playing=""
curr_search=""



curr_q_index = -1
queue_length=len(queue)

#Odd numbers are titles, even numbers are urls/ids
top3results=["","","","","",""]

x=vlPlayer()

def play_btn():
    global pl_indiv
    global pl_queue
    global curr_q_index
    global query_url
    global curr_playing
    global found_title
    if pl_queue==True:
        stop()
        pl_queue = False
    pl_indiv = True
    curr_playing=found_title
    curr_q_index =-1
    play(query_url)

def play_queue_btn():
    global pl_indiv
    global pl_queue
    global play_next
    global curr_q_index
    global queue
    global end_of_queue
    curr_q_index = -1
    print("len(queue): ", len(queue))
    if len(queue) > 0:
        curr_q_index = 0
        if pl_indiv==True:
            stop()
            pl_indiv=False
        pl_queue = True
        play_next = True
        end_of_queue = False
        play_queue()

def play(*args):
    ##Helpful link: https://stackoverflow.com/questions/54862611/pafy-and-vlc-audio-only-in-python
    global pl_indiv
    global pl_queue
    global curr_playing
    global playing
    global res_pause
    # if playing.get():
    #     pass
    # else:
    #     if pl_indiv == True:
    #         x.play(query_url.get())
    #         playing.set(True)
    #         res_pause.set("Pause")
    #         play_time()
    #     elif play_queue == True:
    #         x.play(args[0][0])
    #         playing.set(True)
    #         res_pause.set("Pause")
    #         play_time()

    
    
    
    # if (len(args) == 0):
    #     curr_playing=found_title
    #     # x.play(query_url)
    # else:
    #     pass
    x.play(args[0])
    # x.play(args[0])
    playing = True
    res_pause = "Pause"
    ui.statusSong_label.setWordWrap(True)
    ui.statusSong_label.setText("Currently Playing: " + curr_playing)
    play_time()
    if pl_queue == True:
        QtCore.QTimer.singleShot(250, check_finished)

def play_queue():
    global pl_queue
    global play_next
    global end_of_queue
    global curr_playing
    global curr_q_index

    if play_next == True:
        if curr_q_index < len(queue):
            play_next = False
            curr_playing = str(queue[curr_q_index][0])
            play(queue[curr_q_index][1])
            curr_q_index = curr_q_index + 1
        else: 
            print("End of queue")
            pl_queue=False
    else:
        pass

    # if len(queue) != 0 and curr_q_index.get() < len(queue):
        

    # if len(queue) != 0 and curr_q_index.get() < len(queue):
    #     # x.playlist(queue)
    #     if curr_q_index.get() == -1:
    #         curr_q_index.set(curr_q_index.get() + 1)
    #     print("hit")
    #     play(queue[curr_q_index.get()][1])
    #     playing = set([1,2,3,4])
    #     time.sleep(1)
    #     check_finished()
    #     play_queue()
        # while True:
        #     state = x.get_state()
        #     if state not in playing:
        #         break
        #     continue
        # if len(queue) > curr_q_index.get():
        #     curr_q_index.set(curr_q_index.get() + 1)
        #     play_queue()
        # for item in queue:
        #     print("Title: " + item[0])
        #     play(item[1])
        #     time.sleep(1)
        #     check_finished()


def resume_pause():
    global playing
    global res_pause
    print("Playing status: "+ str(playing))
    if playing==True:
        x.pause()
        print("Hit pause")
        playing = False
        res_pause = "Resume"
        ui.pause_res_pushButton.setText("Resume")
    elif playing==False:
        x.pause()
        print("hit resume")
        playing = True
        res_pause = "Pause"
        ui.pause_res_pushButton.setText("Pause")
    else:
        pass

def stop():
    x.stop()


def change_time(te):
    print(te)
    slide_pos = te
    print("slide_pos: ", slide_pos)
    # resume_pause()
    # ui.music_horizontalSlider.setValue(te)
    x.setPos(te)
    # resume_pause()
    # ui.music_horizontalSlider.setValue(slide_pos)
    # x.setPos(slide_pos)
    ui.currentTime_lineEdit.setText(x.getFormattedTime())
    # curr_time_label.config(text=x.getFormattedTime())

def change_vol(volume):
    
    x.setVol(volume)
    # ui.volume_lineEdit.setText(v_slide)
    # v_slide=str(int(ui.volume_verticalSlider.value))
    ui.volume_lineEdit.setText(str(volume))

def play_time():
    global pl_queue
    global curr_playing
    global playing

    curr_time = x.getCurrTime()
    leng = x.getLength()
    form_time = x.getFormattedTime()
    form_length = x.getFormattedLength()
    fin = x.get_is_finished()
    # if curr_time != leng:
    #     playing = True
    # else:
    #     playing = False
    ui.currentTime_lineEdit.setText(form_time)
    # curr_time_label.config(text=form_time)
    ui.length_label.setText(form_length)
    # length_label.config(text=form_length)
    ui.statusTime_label.setText("Time Elapsed: " + form_time + "     Song Length: " + form_length)
    ui.statusSong_label.setText("Song Playing: " + curr_playing)
    # status_bar.config(text="Song Playing: " + curr_playing + "     Time Elapsed: " + form_time + "     Song Length: " + form_length)
    ui.music_horizontalSlider.setValue(int(curr_time))
    ui.music_horizontalSlider.setMaximum(int(leng))
    # music_slider.config(to=leng, value=curr_time)
    QtCore.QTimer.singleShot(1000, play_time)
    # status_bar.after(1000, play_time)
    if pl_queue == True:
        QtCore.QTimer.singleShot(250, check_finished)

def search(arg):
    global query_url
    global found_title
    if (arg != ""):
        query_title = urllib.parse.urlencode({"search_query":arg})
        formatUrl = urllib.request.urlopen("https://www.youtube.com/results?"+query_title)
        search_results = re.findall(r"watch\?v=(\S{11})", formatUrl.read().decode())
        clip = requests.get("https://www.youtube.com/watch?v="+"{}".format(search_results[0]))
        clip2 = "https://www.youtu.be/"+"{}".format(search_results[0])
        inspect = BeautifulSoup(clip.content, "html.parser")
        yt_title = inspect.find_all("meta",property="og:title")
        query_url = clip2
        for title in yt_title:
            pass
        query_url= pafy.new(clip2).getbestaudio().url
        found_title = str(title['content'])
        update_label(found_title)
        ui.playQueue_pushButton.setEnabled(True)
        # add_q_btn.config(state='normal')
    else:
        print("Empty query")
        query_url = ""
        update_label("Please input a title for the song you'd like to play")
        ui.playQueue_pushButton.setEnabled(False)
        # add_q_btn.config(state='disabled')
def update_label(text):
    ui.result_label.setText("Found:\t" + text)
    # ui.statusSong_label.setWordWrap(True)
    # ui.statusSong_label.setText("Currently Playing: " + text)
    # display_var.set("Found:\t" + text)

def add_song():
    global found_title
    global query_url
    queue.append([found_title, query_url])
    q_url.append(query_url)
    ui.queue_listWidget.addItem(found_title)
    # queue_listbox.insert(END, found_title.get())

# def play_queue():
#     in_queue=True
#     th_timer = threading.Timer(.5, p_q)
#     th_timer.start()

# def is_done():
#     if x.get_is_playing() == True:
#         if music_slider.get() == x.getLength():
#             pass

def check_finished():
    global play_next
    global pl_queue
    global play_next
    print ("hit outside")
    is_fin = x.get_is_finished()
    # print("is_fin: ", is_fin, " pl_queue: ", pl_queue, "playing.get(): ", playing.get())
    if x.get_is_playing()==False and pl_queue == True:
        x.stop()
        play_next = True
        time.sleep(1)
        print("hit inside")
        play_queue()

# def on_closing():
#     if in_queue==True:
#         th_timer.stop()
#     root.destroy()

# app = QtWidgets.QApplication(sys.argv)
# MainWindow = QtWidgets.QMainWindow()
# ui = Ui_MainWindow()
# ui.setupUi(MainWindow)
# MainWindow.show()
sys.exit(app.exec_())




# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     MainWindow = QtWidgets.QMainWindow()
#     ui = Ui_MainWindow()
#     ui.setupUi(MainWindow)
#     MainWindow.show()
#     sys.exit(app.exec_())
